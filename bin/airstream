#!/usr/bin/env ruby

require 'airstream'

options = {
  reciever: '192.168.1.8',
  quiet: false,
  verbose: false,
  use_local_http: true
}

CONFIG_FILE = File.join(ENV['HOME'], '.airstreamrc')

if File.exists? CONFIG_FILE
  options_config = YAML.load_file(CONFIG_FILE)
  options.merge!(options_config)
else
  File.open(CONFIG_FILE,'w') { |file| YAML::dump(options,file) }
  STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
end

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "offer a video file to an airplay device

Usage: #{executable_name} [options] [url|path/]filename

Basic options: (configure default in ~/.airstreamrc)
"

  opts.on("-o RECIEVER",
   "the airplay-device ip-address or domain") do |reciever|
    options[:reciever] = reciever
  end

  opts.on("-q","--quiet",
   "prevent most of the output") do |quiet|
    options[:quiet] = quiet
  end

  opts.on("--verbose",
   "additional output") do |verbose|
    options[:verbose] = verbose
  end

  # opts.on("--enable-use-httpd",
  #  "use httpd to offer local files") do |use_httpd|
  #   options[:use_local_httpd] = true
  # end

  opts.on("-v", "--version",
   "output version information then quit") do |path|
    puts "airstream v" + Airstream::VERSION
    exit 0
  end
end

if ARGV.empty?
  STDERR.puts "No arguments given"
  STDERR.puts option_parser
  exit 1
end

begin

  option_parser.parse!

  unless options[:reciever]
    STDERR.puts "No host given"
    exit 68
  end

  server = Airstream::Server.new(options[:reciever])

  puts "=> Ctrl-C to exit airstream"
  ARGV.each do |file|

    server.allow_local_httpd = options[:use_local_httpd]
    puts "sending video file #{file}" if options[:verbose]
    server.video = file

    print "loading " unless options[:quiet]
    "|/-\\".chars.cycle.each do |c|
      print c unless options[:quiet]
      sleep(0.2)
      print "\b" unless options[:quiet]
      break unless server.loading?
    end
    puts "done" unless options[:quiet]

    video_title = File.basename(file, '.mp4')
    pbar_options = {
      title: video_title,
      total: server.video_duration,
      format: '%t |%b%i| %p%%'
    }
    pbar = ProgressBar.create(pbar_options)
    while (elapsed_time=server.video_position) < server.video_duration
      pbar.progress = elapsed_time
      formatted_time = Time.at(elapsed_time).gmtime.strftime('%R:%S')
      pbar.title = "#{video_title} #{formatted_time}"
      sleep 1.0
    end
    pbar.finish
  end

rescue Airplay::Protocol::InvalidMediaError
  STDERR.puts
  STDERR.puts "invalid media file"
  exit 0
rescue NoMethodError # @FIX webrick raises no method error
  STDERR.puts
  STDERR.puts "file host shutdown"
  exit 0
rescue Interrupt
  STDERR.puts
  STDERR.puts "exiting"
  exit 0
rescue OptionParser::InvalidArgument => ex
  STDERR.puts ex.message
  STDERR.puts option_parser
end

